// <auto-generated />
using System;
using CusomMapOSM_Infrastructure.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CusomMapOSM_Infrastructure.Migrations
{
    [DbContext(typeof(CustomMapOSMDbContext))]
    [Migration("20251031143211_POI")]
    partial class POI
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Advertisements.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AdvertisementId"));

                    b.Property<string>("AdvertisementContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AdvertisementTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AdvertisementId");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Animations.LayerAnimation", b =>
                {
                    b.Property<Guid>("LayerAnimationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("layer_animation_id");

                    b.Property<string>("Coordinates")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("coordinates");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid>("LayerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("layer_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("RotationDeg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("rotation_deg");

                    b.Property<decimal>("Scale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(1m)
                        .HasColumnName("scale");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("source_url");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("ZIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1000)
                        .HasColumnName("z_index");

                    b.HasKey("LayerAnimationId");

                    b.HasIndex("LayerId");

                    b.ToTable("layer_animations", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Animations.LayerAnimationPreset", b =>
                {
                    b.Property<Guid>("AnimationPresetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("animation_preset_id");

                    b.Property<string>("AnimationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("animation_type");

                    b.Property<string>("ConfigSchema")
                        .HasColumnType("json")
                        .HasColumnName("config_schema");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("DefaultDurationMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(600)
                        .HasColumnName("default_duration_ms");

                    b.Property<string>("DefaultEasing")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_easing");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSystemPreset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_system_preset");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("preset_key");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("AnimationPresetId");

                    b.ToTable("layer_animation_presets", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Bookmarks.Bookmark", b =>
                {
                    b.Property<int>("BookmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bookmark_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BookmarkId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("MapId")
                        .HasColumnType("char(36)")
                        .HasColumnName("map_id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("ViewState")
                        .HasColumnType("json")
                        .HasColumnName("view_state");

                    b.HasKey("BookmarkId");

                    b.HasIndex("MapId");

                    b.HasIndex("UserId");

                    b.ToTable("bookmarks", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Comments.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("LayerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("layer_id");

                    b.Property<Guid>("MapId")
                        .HasColumnType("char(36)")
                        .HasColumnName("map_id");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("position");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId");

                    b.HasIndex("LayerId");

                    b.HasIndex("MapId");

                    b.HasIndex("UserId");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Exports.Export", b =>
                {
                    b.Property<int>("ExportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("export_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ExportId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("ExportType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("export_type");

                    b.Property<Guid>("ExportTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_path");

                    b.Property<int>("FileSize")
                        .HasColumnType("int")
                        .HasColumnName("file_size");

                    b.Property<Guid>("MapId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MembershipId")
                        .HasColumnType("char(36)");

                    b.Property<string>("QuotaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("quota_type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("ExportId");

                    b.HasIndex("MapId");

                    b.HasIndex("MembershipId");

                    b.HasIndex("UserId");

                    b.ToTable("exports", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Faqs.Faq", b =>
                {
                    b.Property<int>("FaqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("faq_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FaqId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("question");

                    b.HasKey("FaqId");

                    b.ToTable("faqs", (string)null);

                    b.HasData(
                        new
                        {
                            FaqId = 1,
                            Answer = "To create a map, log in to your account, click 'Create New Map', select your desired OpenStreetMap area using the bounding box tool, add layers like roads, buildings, and POIs, customize layer styles (colors, icons, transparency), and annotate with markers, lines, or polygons as needed.",
                            Category = "Map Creation",
                            CreatedAt = new DateTime(2025, 1, 15, 1, 0, 0, 0, DateTimeKind.Utc),
                            Question = "How do I create a custom map?"
                        },
                        new
                        {
                            FaqId = 2,
                            Answer = "You can upload GeoJSON, KML, and CSV files up to 50MB in size. Make sure your CSV files contain coordinate columns for proper mapping. The system validates all uploaded data to ensure compatibility.",
                            Category = "Data Management",
                            CreatedAt = new DateTime(2025, 1, 15, 1, 0, 0, 0, DateTimeKind.Utc),
                            Question = "What file formats can I upload for my maps?"
                        },
                        new
                        {
                            FaqId = 3,
                            Answer = "You can export your maps in PDF, PNG, SVG, GeoJSON, and MBTiles formats. Resolution options range from 72 to 300 DPI depending on your subscription plan. Export quotas are plan-limited to ensure fair usage.",
                            Category = "Export System",
                            CreatedAt = new DateTime(2025, 1, 15, 1, 0, 0, 0, DateTimeKind.Utc),
                            Question = "What export formats are available?"
                        },
                        new
                        {
                            FaqId = 4,
                            Answer = "Use the real-time collaboration feature to share maps and layers with team members. You can set permissions for view, edit, or manage access levels. The system tracks map version history and supports WebSocket-based real-time updates for seamless collaboration.",
                            Category = "Collaboration",
                            CreatedAt = new DateTime(2025, 1, 15, 1, 0, 0, 0, DateTimeKind.Utc),
                            Question = "How do I collaborate with my team on maps?"
                        },
                        new
                        {
                            FaqId = 5,
                            Answer = "We accept payments through VNPay, PayOS, Stripe, and PayPal. All transactions are secured with PCI-DSS compliance and processed through our secure payment gateway integration.",
                            Category = "Billing",
                            CreatedAt = new DateTime(2025, 1, 15, 1, 0, 0, 0, DateTimeKind.Utc),
                            Question = "What payment methods are accepted?"
                        },
                        new
                        {
                            FaqId = 6,
                            Answer = "CustomMapOSM is compatible with Chrome, Firefox, and Edge browsers on desktop and mobile devices. For best performance, we recommend using the latest version of these browsers. The platform is built with Next.js 14 and React 18 for optimal user experience.",
                            Category = "Technical",
                            CreatedAt = new DateTime(2025, 1, 15, 1, 0, 0, 0, DateTimeKind.Utc),
                            Question = "What browsers and devices are supported?"
                        },
                        new
                        {
                            FaqId = 7,
                            Answer = "We offer various subscription plans with different quotas for map creation, exports, and collaboration features. You can upgrade or downgrade your plan at any time. Plans include auto-renewal options and usage tracking to help you monitor your consumption.",
                            Category = "Membership",
                            CreatedAt = new DateTime(2025, 1, 15, 1, 0, 0, 0, DateTimeKind.Utc),
                            Question = "How do subscription plans work?"
                        },
                        new
                        {
                            FaqId = 8,
                            Answer = "Yes, you can purchase add-ons like extra exports, advanced analytics, or API access. Add-ons are available in different quantities and take effect immediately upon successful payment. They complement your existing membership plan.",
                            Category = "Membership",
                            CreatedAt = new DateTime(2025, 1, 15, 1, 0, 0, 0, DateTimeKind.Utc),
                            Question = "Can I purchase additional features or add-ons?"
                        },
                        new
                        {
                            FaqId = 9,
                            Answer = "As an organization owner, you can invite team members, set their roles (Owner, Admin, Member, Viewer), and manage organization locations. Each organization can have multiple members with different permission levels for maps and collaboration features.",
                            Category = "Organization",
                            CreatedAt = new DateTime(2025, 1, 15, 1, 0, 0, 0, DateTimeKind.Utc),
                            Question = "How do I manage my organization and team members?"
                        },
                        new
                        {
                            FaqId = 10,
                            Answer = "The platform is designed for high performance with map loads under 2 seconds and exports under 30 seconds. It can support up to 1000 concurrent users and uses MySQL 8.0 with GIS extensions for spatial data processing and Azure Blob Storage for file management.",
                            Category = "Technical",
                            CreatedAt = new DateTime(2025, 1, 15, 1, 0, 0, 0, DateTimeKind.Utc),
                            Question = "What is the performance and scalability of the platform?"
                        },
                        new
                        {
                            FaqId = 11,
                            Answer = "You can submit support tickets through the platform, and our team will respond promptly. We also provide comprehensive documentation and FAQs. For urgent issues, please include detailed information about the problem and steps to reproduce it.",
                            Category = "Support",
                            CreatedAt = new DateTime(2025, 1, 15, 1, 0, 0, 0, DateTimeKind.Utc),
                            Question = "How do I get support if I encounter issues?"
                        },
                        new
                        {
                            FaqId = 12,
                            Answer = "Yes, we implement comprehensive security measures including JWT authentication, RBAC (Role-Based Access Control), data encryption at rest and in-transit, and audit logging for sensitive operations. Your maps can be set to private or public based on your preferences.",
                            Category = "Security",
                            CreatedAt = new DateTime(2025, 1, 15, 1, 0, 0, 0, DateTimeKind.Utc),
                            Question = "Is my data secure and private?"
                        });
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Layers.Layer", b =>
                {
                    b.Property<Guid>("LayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("layer_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("DataBounds")
                        .HasColumnType("text")
                        .HasColumnName("data_bounds");

                    b.Property<decimal?>("DataSizeKB")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("data_size_kb");

                    b.Property<string>("DataStoreKey")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("data_store_key");

                    b.Property<int?>("FeatureCount")
                        .HasColumnType("int")
                        .HasColumnName("feature_count");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("file_path");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_public");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_visible");

                    b.Property<string>("LayerData")
                        .HasColumnType("longtext")
                        .HasColumnName("layer_data");

                    b.Property<string>("LayerName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("layer_name");

                    b.Property<int>("LayerOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("layer_order");

                    b.Property<string>("LayerStyle")
                        .HasColumnType("longtext")
                        .HasColumnName("layer_style");

                    b.Property<int>("LayerType")
                        .HasColumnType("int")
                        .HasColumnName("layer_type_id");

                    b.Property<Guid>("MapId")
                        .HasColumnType("char(36)")
                        .HasColumnName("map_id");

                    b.Property<int>("SourceType")
                        .HasColumnType("int")
                        .HasColumnName("source_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<int>("ZIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("z_index");

                    b.HasKey("LayerId");

                    b.HasIndex("MapId");

                    b.HasIndex("UserId");

                    b.ToTable("layers", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Locations.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("AnimationOverrides")
                        .HasColumnType("TEXT")
                        .HasColumnName("animation_overrides");

                    b.Property<Guid?>("AnimationPresetId")
                        .HasColumnType("char(36)")
                        .HasColumnName("animation_preset_id");

                    b.Property<Guid?>("AssociatedLayerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("associated_layer_id");

                    b.Property<string>("AudioUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("audio_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<string>("EffectType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("effect_type");

                    b.Property<string>("ExternalUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("external_url");

                    b.Property<bool>("HighlightOnEnter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("highlight_on_enter");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible");

                    b.Property<Guid?>("LinkedLocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("linked_location_id");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("location_type");

                    b.Property<Guid>("MapId")
                        .HasColumnType("char(36)")
                        .HasColumnName("map_id");

                    b.Property<string>("MarkerGeometry")
                        .HasColumnType("TEXT")
                        .HasColumnName("marker_geometry");

                    b.Property<string>("MediaResources")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_resources");

                    b.Property<bool>("OpenSlideOnClick")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("open_slide_on_click");

                    b.Property<bool>("PlayAudioOnClick")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("play_audio_on_click");

                    b.Property<Guid?>("SegmentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("segment_id");

                    b.Property<bool>("ShowTooltip")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("show_tooltip");

                    b.Property<string>("SlideContent")
                        .HasColumnType("TEXT")
                        .HasColumnName("slide_content");

                    b.Property<string>("StoryContent")
                        .HasColumnType("TEXT")
                        .HasColumnName("story_content");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("subtitle");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("TooltipContent")
                        .HasColumnType("TEXT")
                        .HasColumnName("tooltip_content");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("ZIndex")
                        .HasColumnType("int")
                        .HasColumnName("z_index");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("char(36)")
                        .HasColumnName("zone_id");

                    b.HasKey("LocationId");

                    b.HasIndex("AnimationPresetId");

                    b.HasIndex("AssociatedLayerId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LinkedLocationId");

                    b.HasIndex("MapId");

                    b.HasIndex("SegmentId");

                    b.HasIndex("ZoneId");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Maps.Map", b =>
                {
                    b.Property<Guid>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("map_id");

                    b.Property<string>("BaseLayer")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("osm")
                        .HasColumnName("base_layer");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("DefaultBounds")
                        .HasColumnType("longtext")
                        .HasColumnName("default_bounds");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_featured");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_public");

                    b.Property<bool>("IsTemplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_template");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("map_name");

                    b.Property<Guid?>("ParentMapId")
                        .HasColumnType("char(36)")
                        .HasColumnName("parent_map_id");

                    b.Property<string>("PreviewImage")
                        .HasColumnType("longtext")
                        .HasColumnName("preview_image");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("usage_count");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("ViewState")
                        .HasColumnType("longtext")
                        .HasColumnName("view_state");

                    b.Property<Guid?>("WorkspaceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workspace_id");

                    b.HasKey("MapId");

                    b.HasIndex("ParentMapId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("maps", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Maps.MapFeature", b =>
                {
                    b.Property<Guid>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("feature_id");

                    b.Property<string>("AnnotationType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("annotation_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FeatureCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("feature_category");

                    b.Property<string>("GeometryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("geometry_type");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_visible");

                    b.Property<Guid?>("LayerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("layer_id");

                    b.Property<Guid>("MapId")
                        .HasColumnType("char(36)")
                        .HasColumnName("map_id");

                    b.Property<string>("MongoDocumentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mongo_document_id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("ZIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("z_index");

                    b.HasKey("FeatureId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LayerId");

                    b.HasIndex("MapId");

                    b.ToTable("map_features", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Maps.MapHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("history_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("HistoryVersion")
                        .HasColumnType("int")
                        .HasColumnName("history_version");

                    b.Property<Guid>("MapId")
                        .HasColumnType("char(36)")
                        .HasColumnName("map_id");

                    b.Property<string>("SnapshotData")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("snapshot_data");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("HistoryId");

                    b.HasIndex("MapId");

                    b.HasIndex("UserId");

                    b.ToTable("map_histories", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Maps.MapImage", b =>
                {
                    b.Property<int>("MapImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("map_image_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MapImageId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("height");

                    b.Property<string>("ImageData")
                        .HasColumnType("longtext")
                        .HasColumnName("image_data");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_name");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_visible");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,8)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11,8)")
                        .HasColumnName("longitude");

                    b.Property<Guid>("MapId")
                        .HasColumnType("char(36)")
                        .HasColumnName("map_id");

                    b.Property<decimal?>("Rotation")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("rotation");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("width");

                    b.Property<int>("ZIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(500)
                        .HasColumnName("z_index");

                    b.HasKey("MapImageId");

                    b.HasIndex("MapId");

                    b.ToTable("map_images", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Memberships.Membership", b =>
                {
                    b.Property<Guid>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("membership_id");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("auto_renew");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrentUsage")
                        .HasColumnType("json")
                        .HasColumnName("current_usage");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("LastResetDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_reset_date");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)")
                        .HasColumnName("org_id");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("plan_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("MembershipId");

                    b.HasIndex("OrgId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("memberships", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Memberships.MembershipUsage", b =>
                {
                    b.Property<Guid>("UsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("usage_id");

                    b.Property<int>("ActiveUsersInOrg")
                        .HasColumnType("int")
                        .HasColumnName("active_users_in_org");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("CycleEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("cycle_end_date");

                    b.Property<DateTime>("CycleStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("cycle_start_date");

                    b.Property<int>("ExportsThisCycle")
                        .HasColumnType("int")
                        .HasColumnName("exports_this_cycle");

                    b.Property<string>("FeatureFlags")
                        .HasColumnType("json")
                        .HasColumnName("feature_flags");

                    b.Property<int>("MapsCreatedThisCycle")
                        .HasColumnType("int")
                        .HasColumnName("maps_created_this_cycle");

                    b.Property<Guid>("MembershipId")
                        .HasColumnType("char(36)")
                        .HasColumnName("membership_id");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)")
                        .HasColumnName("org_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("UsageId");

                    b.ToTable("membership_usages", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Memberships.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("plan_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<bool>("Allow3DEffects")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowAnimatedConnections")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowAudioContent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowVideoContent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DurationMonths")
                        .HasColumnType("int")
                        .HasColumnName("duration_months");

                    b.Property<int>("ExportQuota")
                        .HasColumnType("int")
                        .HasColumnName("export_quota");

                    b.Property<string>("Features")
                        .HasColumnType("json")
                        .HasColumnName("features");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<int>("MapQuota")
                        .HasColumnType("int")
                        .HasColumnName("map_quota");

                    b.Property<long>("MaxAudioFileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxConnectionsPerMap")
                        .HasColumnType("int");

                    b.Property<int>("MaxCustomLayers")
                        .HasColumnType("int")
                        .HasColumnName("max_custom_layers");

                    b.Property<int>("MaxInteractionsPerMap")
                        .HasColumnType("int");

                    b.Property<int>("MaxLocationsPerOrg")
                        .HasColumnType("int")
                        .HasColumnName("max_locations_per_org");

                    b.Property<int>("MaxMapsPerMonth")
                        .HasColumnType("int")
                        .HasColumnName("max_maps_per_month");

                    b.Property<long>("MaxMediaFileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxOrganizations")
                        .HasColumnType("int")
                        .HasColumnName("max_organizations");

                    b.Property<int>("MaxUsersPerOrg")
                        .HasColumnType("int")
                        .HasColumnName("max_users_per_org");

                    b.Property<long>("MaxVideoFileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("MonthlyTokens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10000)
                        .HasColumnName("monthly_tokens");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("plan_name");

                    b.Property<decimal?>("PriceMonthly")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price_monthly");

                    b.Property<bool>("PrioritySupport")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("priority_support");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("PlanId");

                    b.ToTable("plans", (string)null);

                    b.HasData(
                        new
                        {
                            PlanId = 1,
                            Allow3DEffects = false,
                            AllowAnimatedConnections = true,
                            AllowAudioContent = true,
                            AllowVideoContent = true,
                            CreatedAt = new DateTime(2025, 8, 6, 1, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Basic features for individual users",
                            DurationMonths = 1,
                            ExportQuota = 5,
                            Features = "{\"templates\": true, \"basic_export\": true, \"public_maps\": true}",
                            IsActive = true,
                            MapQuota = 10,
                            MaxAudioFileSizeBytes = 20971520L,
                            MaxConnectionsPerMap = 100,
                            MaxCustomLayers = 3,
                            MaxInteractionsPerMap = 50,
                            MaxLocationsPerOrg = 1,
                            MaxMapsPerMonth = 5,
                            MaxMediaFileSizeBytes = 10485760L,
                            MaxOrganizations = 1,
                            MaxUsersPerOrg = 1,
                            MaxVideoFileSizeBytes = 104857600L,
                            MonthlyTokens = 5000,
                            PlanName = "Free",
                            PriceMonthly = 0.00m,
                            PrioritySupport = false
                        },
                        new
                        {
                            PlanId = 2,
                            Allow3DEffects = false,
                            AllowAnimatedConnections = true,
                            AllowAudioContent = true,
                            AllowVideoContent = true,
                            CreatedAt = new DateTime(2025, 8, 6, 1, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Advanced features for growing businesses",
                            DurationMonths = 1,
                            ExportQuota = 200,
                            Features = "{\"templates\": true, \"all_export_formats\": true, \"collaboration\": true, \"data_import\": true, \"analytics\": true, \"version_history\": true}",
                            IsActive = true,
                            MapQuota = 200,
                            MaxAudioFileSizeBytes = 20971520L,
                            MaxConnectionsPerMap = 100,
                            MaxCustomLayers = 50,
                            MaxInteractionsPerMap = 50,
                            MaxLocationsPerOrg = 20,
                            MaxMapsPerMonth = 100,
                            MaxMediaFileSizeBytes = 10485760L,
                            MaxOrganizations = 5,
                            MaxUsersPerOrg = 20,
                            MaxVideoFileSizeBytes = 104857600L,
                            MonthlyTokens = 50000,
                            PlanName = "Pro",
                            PriceMonthly = 29.99m,
                            PrioritySupport = true
                        },
                        new
                        {
                            PlanId = 3,
                            Allow3DEffects = false,
                            AllowAnimatedConnections = true,
                            AllowAudioContent = true,
                            AllowVideoContent = true,
                            CreatedAt = new DateTime(2025, 8, 6, 1, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Full-featured solution for large organizations",
                            DurationMonths = 1,
                            ExportQuota = -1,
                            Features = "{\"templates\": true, \"all_export_formats\": true, \"collaboration\": true, \"data_import\": true, \"analytics\": true, \"version_history\": true, \"api_access\": true, \"white_label\": true, \"sso\": true}",
                            IsActive = true,
                            MapQuota = -1,
                            MaxAudioFileSizeBytes = 20971520L,
                            MaxConnectionsPerMap = 100,
                            MaxCustomLayers = -1,
                            MaxInteractionsPerMap = 50,
                            MaxLocationsPerOrg = -1,
                            MaxMapsPerMonth = -1,
                            MaxMediaFileSizeBytes = 10485760L,
                            MaxOrganizations = -1,
                            MaxUsersPerOrg = -1,
                            MaxVideoFileSizeBytes = 104857600L,
                            MonthlyTokens = 200000,
                            PlanName = "Enterprise",
                            PriceMonthly = 99.99m,
                            PrioritySupport = true
                        });
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("message");

                    b.Property<string>("Metadata")
                        .HasColumnType("json")
                        .HasColumnName("metadata");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Organizations.Organization", b =>
                {
                    b.Property<Guid>("OrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("org_id");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("abbreviation");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contact_phone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("logo_url");

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("org_name");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("owner_user_id");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("OrgId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Organizations.OrganizationInvitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("invitation_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expires_at");

                    b.Property<string>("InvitationToken")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("invitation_token");

                    b.Property<DateTime>("InvitedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("invited_at");

                    b.Property<Guid>("InvitedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("invited_by");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("message");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)")
                        .HasColumnName("org_id");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("responded_at");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.HasKey("InvitationId");

                    b.HasIndex("Email");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("InvitedBy");

                    b.HasIndex("OrgId");

                    b.HasIndex("Status");

                    b.ToTable("organization_invitations", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Organizations.OrganizationMember", b =>
                {
                    b.Property<Guid>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("member_id");

                    b.Property<Guid?>("InvitationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("invitation_id");

                    b.Property<Guid?>("InvitedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("invited_by");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("joined_at");

                    b.Property<string>("LeaveReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("leave_reason");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("datetime")
                        .HasColumnName("left_at");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)")
                        .HasColumnName("org_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("MemberId");

                    b.HasIndex("InvitationId");

                    b.HasIndex("InvitedBy");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.HasIndex("OrgId", "UserId")
                        .IsUnique();

                    b.ToTable("organization_members", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Segments.Segment", b =>
                {
                    b.Property<Guid>("SegmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("segment_id");

                    b.Property<bool>("AutoFitBounds")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("auto_fit_bounds");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DefaultLayerAnimationPresetId")
                        .HasColumnType("char(36)")
                        .HasColumnName("default_layer_animation_preset_id");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<Guid?>("EntryAnimationPresetId")
                        .HasColumnType("char(36)")
                        .HasColumnName("entry_animation_preset_id");

                    b.Property<Guid?>("ExitAnimationPresetId")
                        .HasColumnType("char(36)")
                        .HasColumnName("exit_animation_preset_id");

                    b.Property<Guid>("MapId")
                        .HasColumnType("char(36)")
                        .HasColumnName("map_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("PlaybackMode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("playback_mode");

                    b.Property<string>("StoryContent")
                        .HasColumnType("TEXT")
                        .HasColumnName("story_content");

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("summary");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("SegmentId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DefaultLayerAnimationPresetId");

                    b.HasIndex("EntryAnimationPresetId");

                    b.HasIndex("ExitAnimationPresetId");

                    b.HasIndex("MapId");

                    b.ToTable("segments", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.StoryElement.StoryElementLayer", b =>
                {
                    b.Property<Guid>("StoryElementLayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("story_element_layer_id");

                    b.Property<string>("AnimationOverrides")
                        .HasColumnType("TEXT")
                        .HasColumnName("animation_overrides");

                    b.Property<Guid?>("AnimationPresetId")
                        .HasColumnType("char(36)")
                        .HasColumnName("animation_preset_id");

                    b.Property<bool>("AutoPlayAnimation")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("auto_play_animation");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("DelayMs")
                        .HasColumnType("int")
                        .HasColumnName("delay_ms");

                    b.Property<string>("DisplayMode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("display_mode");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<string>("Easing")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("easing");

                    b.Property<Guid>("ElementId")
                        .HasColumnType("char(36)")
                        .HasColumnName("element_id");

                    b.Property<int>("ElementType")
                        .HasColumnType("int")
                        .HasColumnName("element_type");

                    b.Property<decimal>("EndOpacity")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("end_opacity");

                    b.Property<bool>("ExpandToZone")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("expand_to_zone");

                    b.Property<int>("FadeInMs")
                        .HasColumnType("int")
                        .HasColumnName("fade_in_ms");

                    b.Property<int>("FadeOutMs")
                        .HasColumnType("int")
                        .HasColumnName("fade_out_ms");

                    b.Property<bool>("HighlightZoneBoundary")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("highlight_zone_boundary");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible");

                    b.Property<Guid>("LayerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("layer_id");

                    b.Property<string>("Metadata")
                        .HasColumnType("TEXT")
                        .HasColumnName("metadata");

                    b.Property<decimal>("Opacity")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("opacity");

                    b.Property<int>("RepeatCount")
                        .HasColumnType("int")
                        .HasColumnName("repeat_count");

                    b.Property<decimal>("StartOpacity")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("start_opacity");

                    b.Property<string>("StyleOverride")
                        .HasColumnType("TEXT")
                        .HasColumnName("style_override");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("char(36)")
                        .HasColumnName("zone_id");

                    b.HasKey("StoryElementLayerId");

                    b.HasIndex("AnimationPresetId");

                    b.HasIndex("LayerId");

                    b.HasIndex("ZoneId");

                    b.ToTable("story_element_layers", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Tickets.SupportTicket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("low")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("resolved_at");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("subject");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("support_tickets", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Tickets.SupportTicketMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsFromUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_from_user");

                    b.Property<string>("Message")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("message");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.HasKey("MessageId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_support_ticket_messages_created_at");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("IX_support_ticket_messages_ticket_id");

                    b.ToTable("support_ticket_messages", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Timeline.TimelineStep", b =>
                {
                    b.Property<Guid>("TimelineStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("timeline_step_id");

                    b.Property<bool>("AutoAdvance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("auto_advance");

                    b.Property<string>("CameraState")
                        .HasColumnType("json")
                        .HasColumnName("camera_state");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("display_order");

                    b.Property<int>("DurationMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(6000)
                        .HasColumnName("duration_ms");

                    b.Property<Guid>("MapId")
                        .HasColumnType("char(36)")
                        .HasColumnName("map_id");

                    b.Property<string>("OverlayContent")
                        .HasColumnType("longtext")
                        .HasColumnName("overlay_content");

                    b.Property<Guid?>("SegmentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("segment_id");

                    b.Property<string>("Subtitle")
                        .HasColumnType("longtext")
                        .HasColumnName("subtitle");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("trigger_type");

                    b.HasKey("TimelineStepId");

                    b.HasIndex("MapId");

                    b.HasIndex("SegmentId");

                    b.ToTable("timeline_steps", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Transactions.PaymentGateway", b =>
                {
                    b.Property<Guid>("GatewayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("gateway_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("GatewayId");

                    b.ToTable("payment_gateways", (string)null);

                    b.HasData(
                        new
                        {
                            GatewayId = new Guid("00000000-0000-0000-0000-000000000048"),
                            Name = "VNPay"
                        },
                        new
                        {
                            GatewayId = new Guid("00000000-0000-0000-0000-000000000049"),
                            Name = "PayPal"
                        },
                        new
                        {
                            GatewayId = new Guid("00000000-0000-0000-0000-000000000050"),
                            Name = "Stripe"
                        },
                        new
                        {
                            GatewayId = new Guid("00000000-0000-0000-0000-000000000051"),
                            Name = "BankTransfer"
                        },
                        new
                        {
                            GatewayId = new Guid("00000000-0000-0000-0000-000000000052"),
                            Name = "PayOS"
                        });
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Transactions.Transactions", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("transaction_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("ExportId")
                        .HasColumnType("int")
                        .HasColumnName("export_id");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("char(36)")
                        .HasColumnName("membership_id");

                    b.Property<Guid>("PaymentGatewayId")
                        .HasColumnType("char(36)")
                        .HasColumnName("payment_gateway_id");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("purpose");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("transaction_reference");

                    b.HasKey("TransactionId");

                    b.HasIndex("ExportId");

                    b.HasIndex("MembershipId");

                    b.HasIndex("PaymentGatewayId");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int")
                        .HasColumnName("account_status");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("full_name");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("last_login");

                    b.Property<DateTime?>("LastTokenReset")
                        .HasColumnType("datetime")
                        .HasColumnName("last_token_reset");

                    b.Property<int>("MonthlyTokenUsage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("monthly_token_usage");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.HasKey("UserId");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            AccountStatus = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@cusommaposm.com",
                            FullName = "System Administrator",
                            LastTokenReset = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MonthlyTokenUsage = 0,
                            PasswordHash = "7aaea8cd5f395868fe32e08a7cb9bb060149f6b3fc8c6695c78ca9bf403f47d8",
                            Phone = "+1234567890",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Workspaces.Workspace", b =>
                {
                    b.Property<Guid>("WorkspaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("workspace_id");

                    b.Property<int>("Access")
                        .HasColumnType("int")
                        .HasColumnName("access");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("char(36)")
                        .HasColumnName("org_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("WorkspaceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("workspace_name");

                    b.HasKey("WorkspaceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrgId");

                    b.ToTable("workspaces", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Zones.Zone", b =>
                {
                    b.Property<Guid>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("zone_id");

                    b.Property<string>("AdminLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("admin_level");

                    b.Property<string>("BoundingBox")
                        .HasColumnType("TEXT")
                        .HasColumnName("bounding_box");

                    b.Property<string>("Centroid")
                        .HasColumnType("TEXT")
                        .HasColumnName("centroid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("external_id");

                    b.Property<string>("FocusCameraState")
                        .HasColumnType("TEXT")
                        .HasColumnName("focus_camera_state");

                    b.Property<string>("Geometry")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("geometry");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_primary");

                    b.Property<DateTime>("LastSyncedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_synced_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentZoneId")
                        .HasColumnType("char(36)")
                        .HasColumnName("parent_zone_id");

                    b.Property<Guid?>("SegmentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("segment_id");

                    b.Property<string>("SimplifiedGeometry")
                        .HasColumnType("TEXT")
                        .HasColumnName("simplified_geometry");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("ZoneCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("zone_code");

                    b.Property<string>("ZoneType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("zone_type");

                    b.HasKey("ZoneId");

                    b.HasIndex("ParentZoneId");

                    b.HasIndex("SegmentId");

                    b.ToTable("zones", (string)null);
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Animations.LayerAnimation", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Layers.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Bookmarks.Bookmark", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Maps.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Comments.Comment", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Layers.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CusomMapOSM_Domain.Entities.Maps.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Layer");

                    b.Navigation("Map");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Exports.Export", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Maps.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Memberships.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Membership");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Layers.Layer", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Maps.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Locations.Location", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Animations.LayerAnimationPreset", "AnimationPreset")
                        .WithMany()
                        .HasForeignKey("AnimationPresetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CusomMapOSM_Domain.Entities.Layers.Layer", "AssociatedLayer")
                        .WithMany()
                        .HasForeignKey("AssociatedLayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Locations.Location", "LinkedLocation")
                        .WithMany()
                        .HasForeignKey("LinkedLocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CusomMapOSM_Domain.Entities.Maps.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Segments.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CusomMapOSM_Domain.Entities.Zones.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AnimationPreset");

                    b.Navigation("AssociatedLayer");

                    b.Navigation("Creator");

                    b.Navigation("LinkedLocation");

                    b.Navigation("Map");

                    b.Navigation("Segment");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Maps.Map", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Maps.Map", "ParentMap")
                        .WithMany()
                        .HasForeignKey("ParentMapId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Workspaces.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentMap");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Maps.MapFeature", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Layers.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CusomMapOSM_Domain.Entities.Maps.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Layer");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Maps.MapHistory", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Maps.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Maps.MapImage", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Maps.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Memberships.Membership", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Memberships.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Organizations.Organization", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Organizations.OrganizationInvitation", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "Inviter")
                        .WithMany()
                        .HasForeignKey("InvitedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inviter");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Organizations.OrganizationMember", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Organizations.OrganizationInvitation", "Invitation")
                        .WithMany()
                        .HasForeignKey("InvitationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "Inviter")
                        .WithMany()
                        .HasForeignKey("InvitedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CusomMapOSM_Domain.Entities.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invitation");

                    b.Navigation("Inviter");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Segments.Segment", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("CusomMapOSM_Domain.Entities.Animations.LayerAnimationPreset", "DefaultLayerAnimationPreset")
                        .WithMany()
                        .HasForeignKey("DefaultLayerAnimationPresetId");

                    b.HasOne("CusomMapOSM_Domain.Entities.Animations.LayerAnimationPreset", "EntryAnimationPreset")
                        .WithMany()
                        .HasForeignKey("EntryAnimationPresetId");

                    b.HasOne("CusomMapOSM_Domain.Entities.Animations.LayerAnimationPreset", "ExitAnimationPreset")
                        .WithMany()
                        .HasForeignKey("ExitAnimationPresetId");

                    b.HasOne("CusomMapOSM_Domain.Entities.Maps.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("DefaultLayerAnimationPreset");

                    b.Navigation("EntryAnimationPreset");

                    b.Navigation("ExitAnimationPreset");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.StoryElement.StoryElementLayer", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Animations.LayerAnimationPreset", "AnimationPreset")
                        .WithMany()
                        .HasForeignKey("AnimationPresetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CusomMapOSM_Domain.Entities.Layers.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Zones.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AnimationPreset");

                    b.Navigation("Layer");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Tickets.SupportTicket", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Tickets.SupportTicketMessage", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Tickets.SupportTicket", "SupportTicket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportTicket");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Timeline.TimelineStep", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Maps.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Segments.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Map");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Transactions.Transactions", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Exports.Export", "Export")
                        .WithMany()
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CusomMapOSM_Domain.Entities.Memberships.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CusomMapOSM_Domain.Entities.Transactions.PaymentGateway", "PaymentGateway")
                        .WithMany()
                        .HasForeignKey("PaymentGatewayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Export");

                    b.Navigation("Membership");

                    b.Navigation("PaymentGateway");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Workspaces.Workspace", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CusomMapOSM_Domain.Entities.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Creator");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("CusomMapOSM_Domain.Entities.Zones.Zone", b =>
                {
                    b.HasOne("CusomMapOSM_Domain.Entities.Zones.Zone", "ParentZone")
                        .WithMany()
                        .HasForeignKey("ParentZoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CusomMapOSM_Domain.Entities.Segments.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentZone");

                    b.Navigation("Segment");
                });
#pragma warning restore 612, 618
        }
    }
}
